namespace btk
{
/**
 * @class btkEvent
 * @brief Label a specific time/frame during an acquisition.
 * @ingroup BTKCommon
 */
/**
 * @var btkEvent::Unknown
 * Unknown method used to detect the event.
 */
/**
 * @var btkEvent::Manual
 * Event detected manually.
 */
/**
 * @var btkEvent::Automatic
 * Automatic method used to detect the event.
 */
/**
 * @var btkEvent::FromForcePlatform
 * Method based on force platform data to detect the event.
 */
 
/** 
 * @class btkAnalog
 * @brief Analog channel data along the time.
 * @ingroup BTKCommon
 */
/**
 * @var btkAnalog::Unknown
 * Unknown gain.
 */
/**
 * @var btkAnalog::PlusMinus10
 * Gain for the range +/- 10 volts.
 */
/**
 * @var btkAnalog::PlusMinus5
 * Gain for the range +/- 5 volts.
 */
/**
 * @var btkAnalog::PlusMinus2Dot5
 * Gain for the range +/- 2.5 volts.
 */
/**
 * @var btkAnalog::PlusMinus1Dot65
 * Gain for the range +/- 1.65 volts.
 */
/**
 * @var btkAnalog::PlusMinus1Dot25
 * Gain for the range +/- 1.25 volts.
 */
/**
 * @var btkAnalog::PlusMinus1
 * Gain for the range +/- 1 volts.
 */
/**
 * @var btkAnalog::PlusMinus0Dot5
 * Gain for the range +/- 0.5 volts.
 */
/**
 * @var btkAnalog::PlusMinus0Dot25
 * Gain for the range +/- 0.25 volts.
 */
/**
 * @var btkAnalog::PlusMinus0Dot1
 * Gain for the range +/- 0.1 volts.
 */
/**
 * @var btkAnalog::PlusMinus0Dot05
 * Gain for the range +/- 0.05 volts.
 */

/** 
 * @class btkAnalogData
 * @brief Class storing the measures for one analog channel.
 * @ingroup BTKCommon
 */
 
/** 
 * @class btkPoint
 * @brief Coordinates of a point in a 3D space along the time.
 * @ingroup BTKCommon
 */
/**
 * @var btkPoint::Marker
 * Enum value which set the point object as a marker.
 */
/**
 * @var btkPoint::Angle
 * Enum value which set the point object as an angle.
 */
/**
 * @var btkPoint::Force
 * Enum value which set the point object as a force.
 */
/**
 * @var btkPoint::Moment
 * Enum value which set the point object as a moment.
 */
/**
 * @var btkPoint::Power
 * Enum value which set the point object as a power.
 */
/**
 * @var btkPoint::Scalar
 * Enum value which set the point object as a scalar.
 */
/**
 * @var btkPoint::Reaction
 * Special type to indicate the point corresponds to one part of a wrench (not really used);
 */
 
/** 
 * @class btkPointData
 * @brief Class storing the measures for a point (3D values and residuals along the time). 
 * @ingroup BTKCommon
 */
 
/**
 * @class btkForcePlatform
 * @brief Base class for all type of force platform.
 * @ingroup BTKCommon
 */
 
/**
 * @class btkWrench
 * @brief Represents a wrench as position, force and moment varying during the time.
 * @ingroup BTKCommon
 */
 
/**
 * @class btkIMU
 * @brief Container of analog channels representing an inertial measurement unit (IMU).
 * @ingroup BTKCommon
 */
 
/**
 * @class btkAcquisition
 * @brief Contains the data related to a biomechanical acquisition.
 * @ingroup BTKCommon
 */
/**
 * @var btkAcquisition::Bit8
 * 8-bit resolution for the analog to digital converter (ADC).
 */
/**
 * @var btkAcquisition::Bit10
 * 10-bit resolution for the analog to digital converter (ADC).
 */
/**
 * @var btkAcquisition::Bit12
 * 12-bit resolution for the analog to digital converter (ADC).
 */
/**
 * @var btkAcquisition::Bit14
 * 14-bit resolution for the analog to digital converter (ADC).
 */
/**
 * @var btkAcquisition::Bit16
 * 16-bit resolution for the analog to digital converter (ADC).
 */
  
/**
 * @class btkEventCollection
 * @brief Collection of events stored in a list.
 * @ingroup BTKCommon
 */
/**
 * @class btkEventCollectionIterator
 * @brief Iterator to pass trough the collection of events.
 */
 
/**
 * @class btkAnalogCollection
 * @brief Collection of analog channels stored in a list.
 * @ingroup BTKCommon
 */
/**
 * @class btkAnalogCollectionIterator
 * @brief Iterator to pass trough the collection of analog channels.
 */
 
/**
 * @class btkPointCollection
 * @brief Collection of points stored in a list.
 * @ingroup BTKCommon
 */
/**
 * @class btkPointCollectionIterator
 * @brief Iterator to pass trough the collection of points.
 */
   
/**
 * @class btkForcePlatformCollection
 * @brief Collection of force platform stored in a list.
 * @ingroup BTKCommon
 */
/**
 * @class btkForcePlatformCollectionIterator
 * @brief Iterator to pass trough the collection of force platform.
 */
  
/**
 * @class btkWrenchCollection
 * @brief Collection of wrenches stored in a list.
 * @ingroup BTKCommon
 */
/**
 * @class btkWrenchCollectionIterator
 * @brief Iterator to pass trough the collection of wrenches.
 */

/**
 * @class btkIMUCollection
 * @brief Collection of IMUs stored in a list.
 * @ingroup BTKCommon
 */
/**
 * @class btkIMUCollectionIterator
 * @brief Iterator to pass trough the collection of IMUs.
 */

/**
 * @class btkMetaData
 * @brief Store data which cannot be embedded within timeseries (calibration matrix, subject informations, ...).
 * @ingroup BTKCommon
 */
/**
 * @class btkMetaDataIterator
 * @brief Iterator to pass trough a level of metadata.
 */
/**
 * @class btkMetaDataInfo
 * @brief Container class to store data of a btkMetaData object.
 * @ingroup BTKCommon
 */
/**
 * @var btkMetaDataInfo::Char
 * Enum value which represents the string.
 */
/**
 * @var btkMetaDataInfo::Byte
 * Enum value which represents the signed 8-bit integers.
 */
/**
 * @var btkMetaDataInfo::Integer
 * Enum value which represents the the signed 16-bit integers.
 */
/**
 * @var btkMetaDataInfo::Real
 * Enum value which represents the floats.
 */
 
/**
 * @class btkDoubleArray
 * @brief Array of doubles stored in a btkMetaDataInfo object.
 */
 
/**
 * @class btkIntArray
 * @brief Array of integers stored in a btkMetaDataInfo object.
 */
 
/**
 * @class btkStringArray
 * @brief Array of strings stored in a btkMetaDataInfo object.
 */
}